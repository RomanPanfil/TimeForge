generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int          @id @default(autoincrement())
  email                  String       @unique
  password               String
  name                   String?
  avatar                 String?
  birthday               DateTime?
  role                   String       @default("executor")
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  projects               Project[]
  assignedTasks          Task[]       @relation("AssignedTasks")
  Comment                Comment[]
  TimeEntry              TimeEntry[]
  sentFriendRequests     Friendship[] @relation("SentFriendRequests")
  receivedFriendRequests Friendship[] @relation("ReceivedFriendRequests")
}

model Friendship {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     String   @default("pending") // "pending", "accepted", "rejected"
  createdAt  DateTime @default(now())
  sender     User     @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

model Project {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  deadline    DateTime?
  ownerId     Int
  owner       User         @relation(fields: [ownerId], references: [id])
  tasks       Task[]
  statuses    TaskStatus[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model TaskStatus {
  id        Int      @id @default(autoincrement())
  name      String
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
  tasks     Task[]
  createdAt DateTime @default(now())

  @@unique([name, projectId]) // Уникальность имени в рамках проекта
}

model Task {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  statusId    Int
  status      TaskStatus  @relation(fields: [statusId], references: [id])
  projectId   Int
  project     Project     @relation(fields: [projectId], references: [id])
  assigneeId  Int?
  assignee    User?       @relation("AssignedTasks", fields: [assigneeId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  comments    Comment[] // Связь с комментариями
  timeEntries TimeEntry[] // Связь с записями времени
}

model TimeEntry {
  id        Int       @id @default(autoincrement())
  taskId    Int
  userId    Int
  startTime DateTime
  endTime   DateTime?
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  taskId    Int
  task      Task     @relation(fields: [taskId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  filePath  String? // Поле для пути к файлу
  createdAt DateTime @default(now())
}
